import tkinter as tk
from tkinter import messagebox
import customtkinter as ctk
from PIL import Image, ImageTk
import os
import oracledb
import re

def get_db_connection():
    return oracledb.connect(
        user="register",
        password="P@ssw0rd",
        dsn="localhost:1521/orcl"
    )

class GameApp:

    def __init__(self, root):
        self.current_user = None
        self.current_password = None
        self.user_connection = None

        self.root = root
        self.root.title("–°–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞")
        self.root.geometry("1200x675")
        self.root.resizable(False, False)

        self.root.update_idletasks()
        self.root.geometry(self.root.geometry())

        self.canvas = tk.Canvas(self.root, width=1200, height=675)
        self.canvas.pack(fill="both", expand=True)

        self.set_background_image()
        self.create_interface()

    def set_background_image(self):
        try:
            current_dir = os.path.dirname(os.path.abspath(__file__))
            image_path = os.path.join(current_dir, "background.png")

            if not os.path.exists(image_path):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")

            self.bg_image = Image.open(image_path).resize((1500, 845))
            self.bg_photo = ImageTk.PhotoImage(self.bg_image)
            self.canvas.create_image(0, 0, image=self.bg_photo, anchor="nw")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞: {e}")
            self.canvas.configure(bg="#2c3e50")

    def create_interface(self):
        self.canvas.create_text(
            50, 30,
            text="üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í",
            font=("Arial", 20),
            fill="white",
            anchor="nw"
        )

        self.update_leaderboard()

        self.auth_btn = self.create_button(self.canvas, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", self.login)
        self.auth_btn.place(x=1200, y=30)

        self.reg_btn = self.create_button(self.canvas, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", self.register)
        self.reg_btn.place(x=1200, y=100)

        self.user_label = None
        self.logout_btn = None
        self.find_game_btn = None

    def show_user_controls(self):
        if self.auth_btn: 
            self.auth_btn.place_forget()
        if self.reg_btn: 
            self.reg_btn.place_forget()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã leaderboard –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è register
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è register
            register_connection = get_db_connection()  # –≠—Ç–æ –≤–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è register
            
            with register_connection.cursor() as cursor:
                cursor.execute("SELECT score FROM REGISTER.leaderboard WHERE username = :username", {"username": self.current_user})
                score = cursor.fetchone()
                if score:
                    score_text = f" ‚Äî –û—á–∫–∏: {score[0]}"
                else:
                    score_text = " ‚Äî –û—á–∫–∏: 0"

            register_connection.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        except oracledb.DatabaseError as e:
            score_text = " ‚Äî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–∫–æ–≤"

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ—á–∫–∞–º–∏
        self.user_label = tk.Label(
            self.canvas,
            text=f"üë§ {self.current_user}{score_text}",
            font=("Arial", 14, "bold"),
            bg="#2c3e50",
            fg="white"
        )
        self.user_label.place(x=1200, y=30)

        self.find_game_btn = self.create_button(self.canvas, "–ù–∞–π—Ç–∏ –∏–≥—Ä—É", self.open_game_window)
        self.find_game_btn.place(x=1200, y=70)

        self.logout_btn = self.create_button(self.canvas, "–í—ã—Ö–æ–¥", self.logout)
        self.logout_btn.place(x=1200, y=110)



    def logout(self):
        self.current_user = None
        self.current_password = None
        self.user_connection = None

        if self.user_label:
            self.user_label.destroy()
        if self.logout_btn:
            self.logout_btn.destroy()
        if self.find_game_btn:
            self.find_game_btn.destroy()

        self.auth_btn.place(x=1200, y=30)
        self.reg_btn.place(x=1200, y=100)

    def update_leaderboard(self):
        leaderboard_data = self.get_leaderboard_data()
        for i, (name, score) in enumerate(leaderboard_data, 1):
            self.canvas.create_text(
                50, 80 + i * 40,
                text=f"{i}. {name} ‚Äî {score}",
                font=("Arial", 14),
                fill="white",
                anchor="nw"
            )


    def get_leaderboard_data(self):
        leaderboard_data = []
        try:
            connection = get_db_connection()
            with connection.cursor() as cursor:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
                cursor.execute("""
                    SELECT username, score
                    FROM (
                        SELECT username, score
                        FROM leaderboard
                        ORDER BY score DESC
                    )
                    WHERE ROWNUM <= 10
                """)
                leaderboard_data = cursor.fetchall()
        except oracledb.DatabaseError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            connection.close()
        return leaderboard_data


    def create_button(self, parent, text, command):
        button = tk.Button(
            parent,
            text=text,
            font=("Arial", 14),
            width=25,
            command=command,
            bg="#3498db",
            fg="white",
            bd=0,
            highlightthickness=0,
            activebackground="#5dade2",
            cursor="hand2"
        )
        def on_enter(e): button.config(bg="#5dade2")
        def on_leave(e): button.config(bg="#3498db")
        button.bind("<Enter>", on_enter)
        button.bind("<Leave>", on_leave)
        return button













    def login(self):
        try:
            connection = get_db_connection()

            login_window = tk.Toplevel(self.root)
            login_window.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            width = 400
            height = 300
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()
            x = int((screen_width / 2) - (width / 2) + 130)
            y = int((screen_height / 2) - (height / 2) + 20)
            login_window.geometry(f"{width}x{height}+{x}+{y}")

            login_window.configure(bg="#271b2f")
            login_window.transient(self.root)
            login_window.grab_set()
            login_window.focus_force()
            login_window.lift()

            container = tk.Frame(login_window, bg="#271b2f")
            container.pack(expand=True, fill="both")

            inner_frame = tk.Frame(container, bg="#271b2f")
            inner_frame.place(relx=0.5, rely=0.5, anchor="center")

            tk.Label(inner_frame, text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", fg="white", bg="#271b2f", font=("Arial", 12)).pack(pady=(0, 5))
            username_entry = tk.Entry(inner_frame, font=("Arial", 12))
            username_entry.pack(pady=(0, 10), ipadx=5, ipady=2)

            tk.Label(inner_frame, text="–ü–∞—Ä–æ–ª—å:", fg="white", bg="#271b2f", font=("Arial", 12)).pack(pady=(0, 5))
            password_entry = tk.Entry(inner_frame, show="*", font=("Arial", 12))
            password_entry.pack(pady=(0, 20), ipadx=5, ipady=2)

            def execute_login():
                username = username_entry.get().strip()
                password = password_entry.get().strip()

                if not username or not password:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
                    return

                try:
                    with connection.cursor() as cursor:
                        cursor.callproc("LOGIN", [username, password])
                    connection.commit()

                    self.current_user = username
                    self.current_password = password
                    self.user_connection = oracledb.connect(
                        user=username,
                        password=password,
                        dsn="localhost:1521/orcl"
                    )

                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")

                    # –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    login_window.destroy()

                    # –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    self.show_user_controls()

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
                    self.show_game_rules()

                except oracledb.DatabaseError as e:
                    try:
                        error_obj, = e.args
                        raw_message = getattr(error_obj, "message", str(e))
                    except Exception:
                        raw_message = str(e)

                    raw_message = re.sub(r"ORA-\d+:\s*", "", raw_message)
                    cleaned_lines = [
                        line for line in raw_message.splitlines()
                        if "line" not in line.lower() and not line.strip().startswith("–Ω–∞ \"")
                    ]

                    error_message = "\n".join(cleaned_lines).strip()
                    messagebox.showerror("–û—à–∏–±–∫–∞", error_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")

            self.create_button(inner_frame, "–í–æ–π—Ç–∏", execute_login).pack(pady=(10, 0))
            login_window.protocol("WM_DELETE_WINDOW", lambda: [connection.close(), login_window.destroy()])

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", str(e))

    def show_game_rules(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
            game_rules = self.user_connection.cursor().var(oracledb.CLOB)

            # –í—ã–∑–æ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
            with self.user_connection.cursor() as cursor:
                cursor.callproc("REGISTER.GET_GAME_RULES", [self.current_user, game_rules])

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ CLOB –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            rules = game_rules.getvalue()

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
            rules_window = tk.Toplevel(self.root)
            rules_window.title("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")
            width = 650
            height = 250
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()

            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–∫–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
            x = int((screen_width / 2) - (width / 2) + 130)
            y = int((screen_height / 2) - (height / 2) + 20)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
            rules_window.geometry(f"{width}x{height}+{x}+{y}")

            rules_window.configure(bg="#271b2f")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            rules_window.transient(self.root)
            rules_window.grab_set()
            rules_window.focus_force()
            rules_window.lift()

            container = tk.Frame(rules_window, bg="#271b2f")
            container.pack(fill="both", expand=True, padx=20, pady=20)

            rules_label = tk.Label(container, text=rules, fg="white", bg="#271b2f", font=("Arial", 12), justify="left")
            rules_label.pack(pady=10)

            close_btn = tk.Button(container, text="–ó–∞–∫—Ä—ã—Ç—å", font=("Arial", 12), command=lambda: self.on_rules_closed(rules_window))
            close_btn.pack(pady=10)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
            rules_window.protocol("WM_DELETE_WINDOW", lambda: self.on_rules_closed(rules_window))

        except oracledb.DatabaseError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: {e}")

    def on_rules_closed(self, rules_window):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        rules_window.destroy()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
        self.open_game_window()


























    def register(self):
        try:
            connection = get_db_connection()

            reg_window = tk.Toplevel(self.root)
            reg_window.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            width = 400
            height = 300
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()
            x = int((screen_width / 2) - (width / 2)+130)
            y = int((screen_height / 2) - (height / 2)+20)
            reg_window.geometry(f"{width}x{height}+{x}+{y}")

            reg_window.configure(bg="#271b2f")
            reg_window.transient(self.root)
            reg_window.grab_set()
            reg_window.focus_force()
            reg_window.lift()

            container = tk.Frame(reg_window, bg="#271b2f")
            container.pack(expand=True, fill="both", pady=20)

            tk.Label(container, text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", fg="white", bg="#271b2f", font=("Arial", 12)).pack(pady=(0, 5))
            username_entry = tk.Entry(container, font=("Arial", 12))
            username_entry.pack(pady=(0, 10), ipadx=5, ipady=2)

            tk.Label(container, text="–ü–∞—Ä–æ–ª—å:", fg="white", bg="#271b2f", font=("Arial", 12)).pack(pady=(0, 5))
            password_entry = tk.Entry(container, show="*", font=("Arial", 12))
            password_entry.pack(pady=(0, 10), ipadx=5, ipady=2)

            tk.Label(container, text="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", fg="white", bg="#271b2f", font=("Arial", 12)).pack(pady=(0, 5))
            confirm_entry = tk.Entry(container, show="*", font=("Arial", 12))
            confirm_entry.pack(pady=(0, 20), ipadx=5, ipady=2)

            def execute_register():
                try:
                    with connection.cursor() as cursor:
                        cursor.callproc("REGISTER", [
                            username_entry.get(),
                            password_entry.get(),
                            confirm_entry.get()
                        ])
                    connection.commit()
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    reg_window.destroy()
                except oracledb.DatabaseError as e:
                    try:
                        error_obj, = e.args
                        raw_message = getattr(error_obj, "message", str(e))
                    except Exception:
                        raw_message = str(e)

                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã ORA-xxxxx:
                    raw_message = re.sub(r"ORA-\d+:\s*", "", raw_message)

                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∏–ª–∏ —Å–ª–æ–≤–æ "line"
                    cleaned_lines = [
                        line for line in raw_message.splitlines()
                        if "line" not in line.lower() and not line.strip().startswith("–Ω–∞ \"")
                    ]

                    error_message = "\n".join(cleaned_lines).strip()
                    messagebox.showerror("–û—à–∏–±–∫–∞", error_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")






            self.create_button(container, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", execute_register).pack(pady=(10, 0))
            reg_window.protocol("WM_DELETE_WINDOW", lambda: [connection.close(), reg_window.destroy()])

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", str(e))

    def open_game_window(self):
        game_window = tk.Toplevel(self.root)
        game_window.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        width = 400
        height = 300
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = int((screen_width / 2) - (width / 2)+130)
        y = int((screen_height / 2) - (height / 2)+20)
        game_window.geometry(f"{width}x{height}+{x}+{y}")

        game_window.configure(bg="#271b2f")
        game_window.transient(self.root)
        game_window.grab_set()
        game_window.focus_force()
        game_window.lift()

        container = tk.Frame(game_window, bg="#271b2f")
        container.pack(expand=True, fill="both")

        inner_frame = tk.Frame(container, bg="#271b2f")
        inner_frame.place(relx=0.5, rely=0.5, anchor="center")

        tk.Label(
            inner_frame,
            text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            fg="white",
            bg="#271b2f",
            font=("Arial", 18, "bold")
        ).pack(pady=(0, 10))

        for text, command in [
            ("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", self.join_game),
            ("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", self.create_game),
            ("–û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞", self.start_game_with_bot)
        ]:
            self.create_button(inner_frame, text, command).pack(pady=5)

        game_window.protocol("WM_DELETE_WINDOW", lambda: game_window.destroy())





























    def join_game(self, room_name=None, password=None):
        try:
            with self.user_connection.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
                cursor.execute("""
                    SELECT COUNT(*) FROM register.players
                    WHERE game_id = (
                        SELECT game_id FROM register.games 
                        WHERE room_name = :room_name
                    ) AND player_username = :username
                """, {'room_name': room_name, 'username': self.current_user})
                
                if cursor.fetchone()[0] > 0:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!")
                    return
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: {str(e)}")
        if not self.user_connection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        # –ï—Å–ª–∏ room_name –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
        if room_name is None:
            self.show_game_selection_window()
            return

        try:
            with self.user_connection.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
                cursor.execute("""
                    SELECT game_id, initial_word, max_players, password_hash 
                    FROM register.games 
                    WHERE room_name = :room_name AND status = 'waiting'
                """, {"room_name": room_name})
                game_info = cursor.fetchone()
                
                if not game_info:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")
                    return
                    
                game_id, initial_word, max_players, stored_password = game_info
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è
                if stored_password and password != stored_password:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ –∏–≥—Ä–µ
                cursor.execute("""
                    SELECT COUNT(*) 
                    FROM register.players 
                    WHERE game_id = :game_id
                """, {"game_id": game_id})
                current_players = cursor.fetchone()[0]
                
                if current_players >= max_players:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–í –∏–≥—Ä–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                cursor.execute("""
                    INSERT INTO register.players (game_id, player_username, status, move_order)
                    VALUES (:game_id, :username, 'waiting', :move_order)
                """, {
                    "game_id": game_id,
                    "username": self.current_user,
                    "move_order": current_players + 1
                })
                
                self.user_connection.commit()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ: {room_name}")
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è
                self.show_waiting_room(game_id, room_name, max_players)
                
        except oracledb.DatabaseError as e:
            error_obj, = e.args
            messagebox.showerror("–û—à–∏–±–∫–∞", error_obj.message)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    def show_game_selection_window(self):
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
        join_window = tk.Toplevel(self.root)
        join_window.title("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ")
        join_window.geometry("600x500")
        join_window.configure(bg="#271b2f")
        join_window.transient(self.root)
        join_window.grab_set()

        container = tk.Frame(join_window, bg="#271b2f")
        container.pack(fill="both", expand=True, padx=20, pady=20)

        tk.Label(container, text="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:", font=("Arial", 12), bg="#271b2f", fg="white").pack(anchor="w")
        search_entry = tk.Entry(container, font=("Arial", 12))
        search_entry.pack(fill="x", pady=(0, 10))

        game_listbox = tk.Listbox(container, font=("Arial", 12), height=15, width=70)
        game_listbox.pack(pady=(0, 10))

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
        def update_game_list():
            filter_text = search_entry.get().strip()

            game_listbox.delete(0, tk.END)
            try:
                with self.user_connection.cursor() as cursor:
                    cursor.execute("""
                        SELECT room_name, current_players, max_players, turn_time_minutes, password_hash
                        FROM register.games
                        WHERE status = 'waiting'
                        AND (room_name LIKE :filter OR :filter IS NULL)
                    """, {"filter": f"%{filter_text}%" if filter_text else None})

                    games = cursor.fetchall()
                    for room, current, max_, time, password_hash in games:
                        display = f"{room} ‚Äî {current}/{max_} –∏–≥—Ä–æ–∫–æ–≤, {time} –º–∏–Ω. –Ω–∞ —Ö–æ–¥"
                        game_listbox.insert(tk.END, (display, room, password_hash))  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Ö—ç—à –ø–∞—Ä–æ–ª—è
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä: {e}")

        def on_search(*_):
            update_game_list()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –º–µ–Ω—è–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ
        search_entry.bind("<KeyRelease>", on_search)

        update_game_list()

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∏–≥—Ä–µ –≤ —Å–ø–∏—Å–∫–µ
        def on_double_click(event):
            selected_game = game_listbox.curselection()
            if selected_game:
                game_info = game_listbox.get(selected_game[0])
                display, room_name, password_hash = game_info  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
                join_window.destroy()

                if not password_hash:
                    self.join_game(room_name)
                else:
                    self.prompt_for_password(room_name)

        game_listbox.bind("<Double-1>", on_double_click)

    def prompt_for_password(self, room_name):
        password_window = tk.Toplevel(self.root)
        password_window.title("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        password_window.geometry("300x150")
        password_window.configure(bg="#271b2f")

        tk.Label(password_window, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", font=("Arial", 12), bg="#271b2f", fg="white").pack(anchor="w")
        password_entry = tk.Entry(password_window, font=("Arial", 12), show="*")
        password_entry.pack(fill="x", pady=(0, 10))

        def submit_password():
            password = password_entry.get()
            password_window.destroy()
            self.join_game(room_name, password)

        submit_btn = tk.Button(password_window, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", font=("Arial", 12), bg="#3498db", fg="white", command=submit_password)
        submit_btn.pack(pady=(10, 0))






















    



    def create_game(self):
        if self.user_connection:
            try:
                window = tk.Toplevel(self.root)
                window.title("–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã")
                window.geometry("400x450")
                window.configure(bg="#271b2f")
                window.transient(self.root)
                window.grab_set()
                window.focus_force()
                window.lift()

                container = tk.Frame(window, bg="#271b2f")
                container.pack(expand=True, fill="both", padx=20, pady=20)

                tk.Label(container, text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:", fg="white", bg="#271b2f", font=("Arial", 12)).pack(anchor="w")
                room_name_entry = tk.Entry(container, font=("Arial", 12))
                room_name_entry.pack(fill="x", pady=(0, 10))

                tk.Label(container, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:", fg="white", bg="#271b2f", font=("Arial", 12)).pack(anchor="w")
                player_count_spinbox = tk.Spinbox(container, from_=2, to=4, font=("Arial", 12), width=5)
                player_count_spinbox.pack(pady=(0, 10), fill="x")

                tk.Label(container, text="–í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ (–º–∏–Ω):", fg="white", bg="#271b2f", font=("Arial", 12)).pack(anchor="w")
                turn_time_spinbox = tk.Spinbox(container, from_=1, to=5, font=("Arial", 12), width=5)
                turn_time_spinbox.pack(pady=(0, 10), fill="x")

                use_password_var = tk.BooleanVar()
                use_password_check = tk.Checkbutton(
                    container, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", variable=use_password_var,
                    bg="#271b2f", fg="white", font=("Arial", 12), selectcolor="#271b2f",
                    activebackground="#271b2f", activeforeground="white"
                )
                use_password_check.pack(anchor="w", pady=(10, 0))

                password_entry = tk.Entry(container, font=("Arial", 12), show="*")

                def toggle_password():
                    if use_password_var.get():
                        password_entry.pack(pady=(0, 10), fill="x", before=create_btn)
                    else:
                        password_entry.pack_forget()

                use_password_var.trace_add("write", lambda *args: toggle_password())

                def submit_create_game():
                    room_name = room_name_entry.get().strip()
                    player_count = player_count_spinbox.get()
                    turn_time = turn_time_spinbox.get()
                    password = password_entry.get().strip() if use_password_var.get() else None
                    is_vs_bot = 0

                    if not room_name:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                        return

                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –≤—ã—Ö–æ–¥–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                        with self.user_connection.cursor() as cursor:
                            result_var = cursor.var(int)
                            cursor.callproc("REGISTER.CREATE_GAME", [
                                self.current_user, room_name,
                                int(player_count), password,
                                int(turn_time), is_vs_bot,
                                result_var
                            ])
                            
                            result = result_var.getvalue()
                            if result == 0:
                                messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                                return
                            elif result == -1:
                                raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã")
                            
                            # –ü–æ–ª—É—á–∞–µ–º game_id —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
                            cursor.execute("""
                                SELECT game_id FROM register.games 
                                WHERE room_name = :room_name
                            """, {'room_name': room_name})
                            game_id = cursor.fetchone()[0]
                            
                            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                            window.destroy()
                            self.show_waiting_room(game_id, room_name, int(player_count))

                    except oracledb.DatabaseError as e:
                        error_obj, = e.args
                        messagebox.showerror("–û—à–∏–±–∫–∞", error_obj.message)
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

                create_btn = self.create_button(container, "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", submit_create_game)
                create_btn.pack(pady=(20, 10))

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")





    def show_waiting_room(self, game_id, room_name, max_players):
        waiting_window = tk.Toplevel(self.root)
        waiting_window.title(f"–ö–æ–º–Ω–∞—Ç–∞: {room_name}")
        waiting_window.geometry("500x400")
        waiting_window.configure(bg="#271b2f")
        waiting_window.resizable(False, False)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        def complete_exit():
            try:
                with self.user_connection.cursor() as cursor:
                    # 1. –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                    cursor.execute("""
                        DELETE FROM register.players 
                        WHERE game_id = :game_id AND player_username = :username
                    """, {'game_id': game_id, 'username': self.current_user})
                    
                    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∏–≥—Ä–æ–∫–∏
                    cursor.execute("""
                        SELECT COUNT(*) FROM register.players 
                        WHERE game_id = :game_id
                    """, {'game_id': game_id})
                    players_left = cursor.fetchone()[0]
                    
                    # 3. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∏–≥—Ä—É
                    if players_left == 0:
                        cursor.execute("""
                            DELETE FROM register.games 
                            WHERE game_id = :game_id AND status = 'waiting'
                        """, {'game_id': game_id})
                    
                    self.user_connection.commit()
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã: {e}")
            finally:
                waiting_window.destroy()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        def on_closing():
            if messagebox.askokcancel("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É?"):
                complete_exit()
        
        waiting_window.protocol("WM_DELETE_WINDOW", on_closing)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = tk.Frame(waiting_window, bg="#271b2f")
        container.pack(expand=True, fill="both", padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã
        header_frame = tk.Frame(container, bg="#271b2f")
        header_frame.pack(fill="x", pady=(0, 15))
        tk.Label(header_frame, 
                text=f"–ö–æ–º–Ω–∞—Ç–∞: {room_name}", 
                fg="#f39c12", bg="#271b2f", 
                font=("Arial", 14, "bold")).pack()

        # –ë–ª–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
        players_frame = tk.Frame(container, bg="#271b2f")
        players_frame.pack(fill="x", pady=(0, 20))
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        players_label = tk.Label(players_frame, 
                text="–ò–≥—Ä–æ–∫–∏ (0/0):",  # –í—Ä–µ–º–µ–Ω–Ω–æ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                fg="white", bg="#271b2f", 
                font=("Arial", 12))
        players_label.pack(anchor="w")
        
        # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        players_listbox = tk.Listbox(players_frame, 
                                font=("Arial", 12), 
                                height=5, 
                                width=40, 
                                bg="#3d3242", 
                                fg="white",
                                selectbackground="#f39c12")
        players_listbox.pack(fill="x", pady=(5, 0))

        # –ë–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_frame = tk.Frame(container, bg="#271b2f")
        buttons_frame.pack(fill="x", pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
        start_btn = tk.Button(buttons_frame,
                            text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                            font=("Arial", 12),
                            bg="#3498db",
                            fg="white",
                            state="disabled",
                            command=lambda: self.start_game(game_id))
        start_btn.pack(side="left", padx=(0, 10), fill="x", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        leave_btn = tk.Button(buttons_frame,
                            text="–ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É",
                            font=("Arial", 12),
                            bg="#e74c3c",
                            fg="white",
                            command=on_closing)
        leave_btn.pack(side="right", fill="x", expand=True)

        # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        def update_players_list():
            try:
                players = self.get_players_in_room(game_id)
                players_listbox.delete(0, tk.END)
                
                for player in players:
                    players_listbox.insert(tk.END, player)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                players_label.config(text=f"–ò–≥—Ä–æ–∫–∏ ({len(players)}/{max_players}):")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
                is_owner = self.is_room_owner(game_id, self.current_user)
                if is_owner:
                    start_btn.config(state="normal" if len(players) >= max_players else "disabled")
                else:
                    start_btn.pack_forget()
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            finally:
                waiting_window.after(2000, update_players_list)

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏)
        update_players_list()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–ª–∞—Å—Å):
    def get_players_in_room(self, game_id):
        with self.user_connection.cursor() as cursor:
            cursor.execute("""
                SELECT player_username FROM register.players 
                WHERE game_id = :game_id ORDER BY move_order
            """, {'game_id': game_id})
            return [row[0] for row in cursor.fetchall()]
        
    def is_room_owner(self, game_id, username):
        with self.user_connection.cursor() as cursor:
            cursor.execute("""
                SELECT owner_username FROM register.games 
                WHERE game_id = :game_id
            """, {'game_id': game_id})
            result = cursor.fetchone()
            return result and result[0] == username















    def leave_game(self, window, game_id):
        try:
            with self.user_connection.cursor() as cursor:
                # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                cursor.execute("""
                    DELETE FROM register.players 
                    WHERE game_id = :game_id AND player_username = :username
                """, {'game_id': game_id, 'username': self.current_user})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
                cursor.execute("""
                    SELECT COUNT(*) FROM register.players 
                    WHERE game_id = :game_id
                """, {'game_id': game_id})
                players_left = cursor.fetchone()[0]
                
                # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É
                if players_left == 0:
                    cursor.execute("""
                        DELETE FROM register.games 
                        WHERE game_id = :game_id
                    """, {'game_id': game_id})
                
                self.user_connection.commit()
                window.destroy()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É: {str(e)}")

    def start_game(self, game_id):
        try:
            with self.user_connection.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã
                cursor.execute("""
                    SELECT owner_username 
                    FROM register.games 
                    WHERE game_id = :game_id
                """, {'game_id': game_id})
                owner = cursor.fetchone()[0]
                
                if owner != self.current_user:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
                cursor.execute("""
                    SELECT COUNT(*), max_players 
                    FROM register.players p
                    JOIN register.games g ON p.game_id = g.game_id
                    WHERE p.game_id = :game_id
                    GROUP BY max_players
                """, {'game_id': game_id})
                result = cursor.fetchone()
                
                if not result or result[0] < result[1]:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                cursor.execute("""
                    UPDATE register.games 
                    SET status = 'in_progress' 
                    WHERE game_id = :game_id
                """, {'game_id': game_id})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ "playing"
                cursor.execute("""
                    UPDATE register.players 
                    SET status = 'playing' 
                    WHERE game_id = :game_id
                """, {'game_id': game_id})
                
                self.user_connection.commit()
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
                # (—ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)
                self.show_game_field(game_id)
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É: {str(e)}")








    def start_game_with_bot(self):
        if self.user_connection:
            try:
                with self.user_connection.cursor() as cursor:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.current_user} –Ω–∞—á–∞–ª –∏–≥—Ä—É —Å –±–æ—Ç–æ–º.")
            except oracledb.DatabaseError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))








if __name__ == "__main__":
    root = ctk.CTk()

    window_width = 1200
    window_height = 675
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = int((screen_width / 2) - (window_width / 2))
    y = int((screen_height / 2) - (window_height / 2))
    root.geometry(f"{window_width}x{window_height}+{x}+{y}")

    app = GameApp(root)
    root.mainloop()
